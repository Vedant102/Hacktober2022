/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
int num(BinaryTreeNode<int> *root) {
    if(root == NULL)
        return 0;
    return 1+num(root->left)+num(root->right);
}
void printLevelWise(BinaryTreeNode<int> *root) {
    // Write your code here
    if(root == NULL)
        return;
    
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    q.push(NULL);
    int count = 0;
    int req = num(root);
    while(count < req && !q.empty()) {
        BinaryTreeNode<int>* front = q.front();
        q.pop();
        if(front == NULL) {
            cout<<endl;
            q.push(NULL);
        }
        else{
            cout<<front->data<<" ";
            count++;
            if(front->left)
                q.push(front->left);
            if(front->right)
                q.push(front->right);
        }
    }
}
